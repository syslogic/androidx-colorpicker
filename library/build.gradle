// Module :library
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose.compiler)
    // alias(libs.plugins.devtools.ksp)
    alias(libs.plugins.kotlin.kapt)
    id "maven-publish"
}

base {
    archivesName = "colorpicker_${libs.versions.app.version.name.get()}"
}

android {
    namespace "io.syslogic.colorpicker"
    buildToolsVersion = libs.versions.android.build.tools.get()
    compileSdk Integer.parseInt(libs.versions.android.compile.sdk.get())
    defaultConfig {
        minSdk Integer.parseInt(libs.versions.android.min.sdk.get())
        targetSdk Integer.parseInt(libs.versions.android.target.sdk.get())
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "${project.getProjectDir().absolutePath}/consumer.pro"
    }

    sourceSets.main.java.srcDirs = [ "src/main/java" ]

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = 17
    }

    composeOptions {
    }

    composeCompiler {
        enableStrongSkippingMode = true
        reportsDestination = layout.buildDirectory.dir("compose_compiler")
        stabilityConfigurationFile = rootProject.layout.projectDirectory.file("stability_config.conf")
    }

    buildFeatures {
        buildConfig true
        dataBinding true
        compose true
    }

    buildTypes {
        debug {
            // it breaks the data-binding, eg. when running ./gradlew :library:publishToMavenLocal
            testCoverageEnabled false
            minifyEnabled false
        }
        release {
            minifyEnabled false
        }
    }

    lint {
        lintConfig file('../lint.xml')
        checkAllWarnings true
        warningsAsErrors true
        abortOnError false
        showAll false

        // TODO: Cannot invoke "org.jetbrains.uast.kotlin.KotlinUastResolveProviderService
        //  .getBindingContext(org.jetbrains.kotlin.psi.KtElement)" because "service" is null.
        disable "MutableCollectionMutableState"
        disable "AutoboxingStateCreation"
    }

    packagingOptions {
        resources.pickFirsts.add("META-INF/LGPL2.1")
        resources.pickFirsts.add("META-INF/AL2.0")
        // Unable to strip the following libraries, packaging them as they are:
        jniLibs.keepDebugSymbols.add("**/libandroidx.graphics.path.so")
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {

    implementation libs.kotlin.stdlib
    implementation libs.material.design
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.preference.ktx

    // https://mvnrepository.com/artifact/androidx.compose
    // https://developer.android.com/jetpack/compose/tooling#bom
    implementation platform(libs.androidx.compose.bom)
    implementation libs.bundles.androidx.compose.lib

    /* Composable Preview */
    debugImplementation libs.bundles.androidx.compose.tooling
}

tasks.register("javadoc", Javadoc) { it ->

    title = "Color Picker ${android.defaultConfig.versionName} API"
    source = android.sourceSets.main.java.srcDirs
    destinationDir = project.file("build/outputs/javadoc")
    configurations.implementation.setCanBeResolved(true)

    classpath = files(new File("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"))
    android.getBootClasspath().forEach{classpath += fileTree(it) }
    classpath += fileTree(dir: project.file("build/tmp/aarsToJars/").absolutePath)
    classpath += configurations.implementation
    exclude "**/BuildConfig.java", "**/R.java", "**/*.kt"
    failOnError false

    // options.verbose()
    // javadoc: warning - The code being documented uses modules but the packages
    // defined in https://developer.android.com/reference/ are in the unnamed module.
    options.links "https://docs.oracle.com/en/java/javase/17/docs/api/"
    options.linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
    options.linkSource true
    options.author true

    doFirst {

        // extract AAR files
        configurations.implementation
                .filter { it.name.endsWith(".aar") }
                .each { aar ->
                    copy {
                        from zipTree(aar)
                        include "**/classes.jar"
                        into project.file("build/tmp/aarsToJars/${aar.name.replace(".aar", "")}/")
                    }
                }

        // provide JAR, which contains the generated data-binding classes
        def aar_main = project.file("build/intermediates/aar_main_jar")
        if (aar_main.exists()) {
            copy {
                from aar_main
                include "**/classes.jar"
                into project.file("build/tmp/aarsToJars/aar_main_jar/")
            }
        }
    }
}

javadoc.onlyIf {
    project.file("build/intermediates/aar_main_jar").exists()
}

tasks.register("javadocJar", Jar) {
    dependsOn javadoc
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

tasks.register("sourcesJar", Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

group   = "io.syslogic"
version = libs.versions.app.version.name.get()

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = group
                artifactId = "androidx-colorpicker"
                from components.getByName("release")
                version = libs.versions.app.version.name.get()
                pom {
                    name = "Color Picker"
                    description = "A simple color-picker library for Android"
                    url = "https://github.com/syslogic/${artifactId}"
                    scm {
                        connection = "scm:git:git://github.com/syslogic/${artifactId}.git"
                        developerConnection = "scm:git:ssh://github.com/syslogic/${artifactId}.git"
                        url = "https://github.com/syslogic/${artifactId}/"
                    }
                }
            }
        }
    }
}
